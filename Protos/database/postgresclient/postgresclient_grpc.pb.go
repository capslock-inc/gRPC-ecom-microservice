// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package postgresclientmodel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostgresClientServiceClient is the client API for PostgresClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostgresClientServiceClient interface {
	AllUser(ctx context.Context, in *Emptyparam, opts ...grpc.CallOption) (*Userlist, error)
	UserById(ctx context.Context, in *Userid, opts ...grpc.CallOption) (*User, error)
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Status, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Status, error)
	DeleteUser(ctx context.Context, in *Userid, opts ...grpc.CallOption) (*Status, error)
	AllProduct(ctx context.Context, in *Emptyparam, opts ...grpc.CallOption) (*Productlist, error)
	ProductById(ctx context.Context, in *Productid, opts ...grpc.CallOption) (*Product, error)
	AddProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Status, error)
	UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Status, error)
	DeleteProduct(ctx context.Context, in *Productid, opts ...grpc.CallOption) (*Status, error)
}

type postgresClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostgresClientServiceClient(cc grpc.ClientConnInterface) PostgresClientServiceClient {
	return &postgresClientServiceClient{cc}
}

func (c *postgresClientServiceClient) AllUser(ctx context.Context, in *Emptyparam, opts ...grpc.CallOption) (*Userlist, error) {
	out := new(Userlist)
	err := c.cc.Invoke(ctx, "/postgresclientmodel.PostgresClientService/AllUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresClientServiceClient) UserById(ctx context.Context, in *Userid, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/postgresclientmodel.PostgresClientService/UserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresClientServiceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/postgresclientmodel.PostgresClientService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresClientServiceClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/postgresclientmodel.PostgresClientService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresClientServiceClient) DeleteUser(ctx context.Context, in *Userid, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/postgresclientmodel.PostgresClientService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresClientServiceClient) AllProduct(ctx context.Context, in *Emptyparam, opts ...grpc.CallOption) (*Productlist, error) {
	out := new(Productlist)
	err := c.cc.Invoke(ctx, "/postgresclientmodel.PostgresClientService/AllProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresClientServiceClient) ProductById(ctx context.Context, in *Productid, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/postgresclientmodel.PostgresClientService/ProductById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresClientServiceClient) AddProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/postgresclientmodel.PostgresClientService/AddProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresClientServiceClient) UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/postgresclientmodel.PostgresClientService/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postgresClientServiceClient) DeleteProduct(ctx context.Context, in *Productid, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/postgresclientmodel.PostgresClientService/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostgresClientServiceServer is the server API for PostgresClientService service.
// All implementations must embed UnimplementedPostgresClientServiceServer
// for forward compatibility
type PostgresClientServiceServer interface {
	AllUser(context.Context, *Emptyparam) (*Userlist, error)
	UserById(context.Context, *Userid) (*User, error)
	AddUser(context.Context, *User) (*Status, error)
	UpdateUser(context.Context, *User) (*Status, error)
	DeleteUser(context.Context, *Userid) (*Status, error)
	AllProduct(context.Context, *Emptyparam) (*Productlist, error)
	ProductById(context.Context, *Productid) (*Product, error)
	AddProduct(context.Context, *Product) (*Status, error)
	UpdateProduct(context.Context, *Product) (*Status, error)
	DeleteProduct(context.Context, *Productid) (*Status, error)
	mustEmbedUnimplementedPostgresClientServiceServer()
}

// UnimplementedPostgresClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostgresClientServiceServer struct {
}

func (UnimplementedPostgresClientServiceServer) AllUser(context.Context, *Emptyparam) (*Userlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllUser not implemented")
}
func (UnimplementedPostgresClientServiceServer) UserById(context.Context, *Userid) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserById not implemented")
}
func (UnimplementedPostgresClientServiceServer) AddUser(context.Context, *User) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedPostgresClientServiceServer) UpdateUser(context.Context, *User) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedPostgresClientServiceServer) DeleteUser(context.Context, *Userid) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedPostgresClientServiceServer) AllProduct(context.Context, *Emptyparam) (*Productlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllProduct not implemented")
}
func (UnimplementedPostgresClientServiceServer) ProductById(context.Context, *Productid) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductById not implemented")
}
func (UnimplementedPostgresClientServiceServer) AddProduct(context.Context, *Product) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedPostgresClientServiceServer) UpdateProduct(context.Context, *Product) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedPostgresClientServiceServer) DeleteProduct(context.Context, *Productid) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedPostgresClientServiceServer) mustEmbedUnimplementedPostgresClientServiceServer() {}

// UnsafePostgresClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostgresClientServiceServer will
// result in compilation errors.
type UnsafePostgresClientServiceServer interface {
	mustEmbedUnimplementedPostgresClientServiceServer()
}

func RegisterPostgresClientServiceServer(s grpc.ServiceRegistrar, srv PostgresClientServiceServer) {
	s.RegisterService(&PostgresClientService_ServiceDesc, srv)
}

func _PostgresClientService_AllUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Emptyparam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresClientServiceServer).AllUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresclientmodel.PostgresClientService/AllUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresClientServiceServer).AllUser(ctx, req.(*Emptyparam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresClientService_UserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Userid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresClientServiceServer).UserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresclientmodel.PostgresClientService/UserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresClientServiceServer).UserById(ctx, req.(*Userid))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresClientService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresClientServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresclientmodel.PostgresClientService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresClientServiceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresClientService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresClientServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresclientmodel.PostgresClientService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresClientServiceServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresClientService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Userid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresClientServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresclientmodel.PostgresClientService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresClientServiceServer).DeleteUser(ctx, req.(*Userid))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresClientService_AllProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Emptyparam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresClientServiceServer).AllProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresclientmodel.PostgresClientService/AllProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresClientServiceServer).AllProduct(ctx, req.(*Emptyparam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresClientService_ProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Productid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresClientServiceServer).ProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresclientmodel.PostgresClientService/ProductById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresClientServiceServer).ProductById(ctx, req.(*Productid))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresClientService_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresClientServiceServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresclientmodel.PostgresClientService/AddProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresClientServiceServer).AddProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresClientService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresClientServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresclientmodel.PostgresClientService/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresClientServiceServer).UpdateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostgresClientService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Productid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresClientServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgresclientmodel.PostgresClientService/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresClientServiceServer).DeleteProduct(ctx, req.(*Productid))
	}
	return interceptor(ctx, in, info, handler)
}

// PostgresClientService_ServiceDesc is the grpc.ServiceDesc for PostgresClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostgresClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "postgresclientmodel.PostgresClientService",
	HandlerType: (*PostgresClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllUser",
			Handler:    _PostgresClientService_AllUser_Handler,
		},
		{
			MethodName: "UserById",
			Handler:    _PostgresClientService_UserById_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _PostgresClientService_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _PostgresClientService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _PostgresClientService_DeleteUser_Handler,
		},
		{
			MethodName: "AllProduct",
			Handler:    _PostgresClientService_AllProduct_Handler,
		},
		{
			MethodName: "ProductById",
			Handler:    _PostgresClientService_ProductById_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _PostgresClientService_AddProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _PostgresClientService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _PostgresClientService_DeleteProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Protos/database/postgresclient/postgresclient.proto",
}
